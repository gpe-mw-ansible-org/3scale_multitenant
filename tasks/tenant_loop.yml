---

# Padded sequence number
- set_fact: 
    padded_item: "{{ '%02d'|format(item|int) }}"
- debug: 
    msg: "{{ item }} padded to {{ padded_item }}"

# Name of ocp user that is an admin to the project where 3scale resources reside
- set_fact:
    ocpAdminId: "{{ ocp_user_name_base }}{{ padded_item }}"

# Name of 3scale API administrator of the tenant
- set_fact:
    tenantAdminId: "{{ tenant_admin_user_name_base }}{{ padded_item }}"

- set_fact:
    orgName: "{{ocpAdminId}}-{{API_MANAGER_NS}}"
- set_fact:
    output_file: "{{orgName}}-tenant-signup.xml"

# Wildcard gateway facts
- set_fact:
    GW_WILDCARD_DOMAIN: "wc-router.{{ ocpAdminId }}.{{ ocp_apps_domain }}"
- set_fact:
    MASTER_API_HOST: "https://{{ master_access_token }}@{{API_MANAGER_NS}}-master.{{ocp_apps_domain}}"


#  ################################             Create Tenant            ##################################### #

- block:
    - name: "{{ocpAdminId}}      1)  **********   TENANT CREATION  **********"
      set_fact:
        tenantAdminEmail: "{{adminEmailUser}}%2B{{padded_item}}%40{{adminEmailDomain}}"
    - debug:
        msg: "{{ocpAdminId}} tenantAdminEmail = {{tenantAdminEmail}}" 

      # NOTE:  As of 3scale 2.2, this operation is not idempotent.
      #        It creates a new tenant given the same parameters.
      #        Public and Admin domains of these tenants are different; ie:
      #         user1-3scale-mt-amp0-3-admin.apps.3295.openshift.opentlc.com 
      #         user1-3scale-mt-amp0-2-admin.apps.3295.openshift.opentlc.com
    - uri:
        url: "{{create_tenant_url}}"
        method: POST
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        body: "access_token={{master_access_token}}&org_name={{orgName}}&username={{tenantAdminId}}&password={{tenantAdminPasswd}}&email={{tenantAdminEmail}}"
        timeout: 20
        status_code: 201
        return_content: yes
        validate_certs: no
      register: create_tenant_response

    - name: "{{ocpAdminId}}     2) copy response to {{tenant_output_dir}}/{{output_file}}"
      copy:
        content: "{{create_tenant_response.content}}"
        dest: "{{tenant_output_dir}}/{{output_file}}"

    - name: "{{ocpAdminId}}     3) parse xml and extract access token, account_id and user_id"
      xml:
        path: "{{tenant_output_dir}}/{{output_file}}"
        xpath: //access_token/value
        content: text
      register: tenant_access_token
    - xml:
        path: "{{tenant_output_dir}}/{{output_file}}"
        xpath: //account/id
        content: text
      register: account_id 
    - xml:
        path: "{{tenant_output_dir}}/{{output_file}}"
        xpath: //user[state = "pending"]/id
        content: text
      register: user_id 
    - debug:
        msg: "{{tenant_access_token.matches[0].value}}  {{account_id.matches[0].id}} {{user_id.matches[0].id}}"
        verbosity: 0

    - name: "{{ocpAdminId}}     4) activate new user"
      set_fact:
        activate_user_url: "https://{{API_MANAGER_NS}}-master.{{ocp_apps_domain}}/admin/api/accounts/{{account_id.matches[0].id}}/users/{{user_id.matches[0].id}}/activate.xml"
    - uri:
        url: "{{activate_user_url}}"
        method: PUT
        body: "access_token={{master_access_token}}"
        timeout: 10
        status_code: 200
        return_content: yes
        validate_certs: no
      register: activate_user_response

    - name: "{{ocpAdminId}}     5) Give user view access to 3scale project."
      command: "oc adm policy add-role-to-user view {{ocpAdminId}} -n {{API_MANAGER_NS}}"

    - name: "{{ocpAdminId}}    6) Create corresponding route on 3scale AMP system-provider service"
      command: "oc create route edge {{orgName}}-provider --service=system-provider --hostname={{orgName}}-admin.{{ocp_apps_domain}} -n {{API_MANAGER_NS}}"
      register: create_sys_provider_route
      failed_when: create_sys_provider_route.stderr != ""  and 'AlreadyExists' not in create_sys_provider_route.stderr
    - debug:
        msg: "create_sys_provider_route.stderr = {{create_sys_provider_route.stderr}}"
        verbosity: 1

    - name: "{{ocpAdminId}}   7) Create corresponding route on 3scale AMP system-developer service"
      command: "oc create route edge {{orgName}}-developer --service=system-developer --hostname={{orgName}}.{{ocp_apps_domain}} -n {{API_MANAGER_NS}}"
      register: create_sys_developer_route
      failed_when: create_sys_developer_route.stderr != "" and 'AlreadyExists' not in create_sys_developer_route.stderr

    - name: "{{ocpAdminId}}  8) Populate {{tenant_output_dir}}/{{tenant_provisioning_results_file}}"
      lineinfile: 
        line: "{{ocpAdminId}}\t{{orgName}}-admin.{{ocp_apps_domain}}\t{{tenantAdminId}}\t{{tenantAdminPasswd}}\t{{tenant_access_token.matches[0].value}}"
        path: "{{tenant_output_dir}}/{{tenant_provisioning_results_file}}"
        create: yes
        state: present

  when: create_or_delete_tenants == "create"

#  ########################################################################################################## #
 


#  ############                 Create Corresponding API Gateways for each Tenant                   ######### #

# if create_gws_with_each_tenant is set to true, then an API gateway & project will be created for each corresponding tenant in the same OCP cluster where API Manager resides
# If create_gws_with_each_tenant is set to false, then the assumption that API gateways will be created outside of the OCP cluster where 3scale API Manager resides
- block:
    - name: "{{ocpAdminId}}      9)  **********   TENANT API GW  **********"
      command: "oc adm new-project {{ocpAdminId}}-gw --admin={{ocpAdminId}}  --description={{ocpAdminId}}-gw"
      register: create_proj
      failed_when: create_proj.stderr != ""  and 'already exists' not in create_proj.stderr

    - set_fact:
        THREESCALE_PORTAL_ENDPOINT: "https://{{tenant_access_token.matches[0].value}}@{{orgName}}-admin.{{ocp_apps_domain}}"
      when: tenant_reference_external_api_mgmt_routes|bool 
    - set_fact:
        THREESCALE_PORTAL_ENDPOINT: "http://{{tenant_access_token.matches[0].value}}@system-master.{{ API_MANAGER_NS }}:3000"
      when: not tenant_reference_external_api_mgmt_routes|bool 
    - set_fact:
        BACKEND_ENDPOINT_OVERRIDE: "http://backend-listener.{{API_MANAGER_NS}}:3000"


    # https://access.redhat.com/solutions/3394561
    #   - stage gateway pulls proxy configs with every request to backend service
    - name: "{{ocpAdminId}} 10)        Create Staging Gateway; {{ THREESCALE_PORTAL_ENDPOINT }}"
      shell: |
        oc new-app \
               -f {{tenant_api_gw_template_url}} \
               --param THREESCALE_PORTAL_ENDPOINT={{THREESCALE_PORTAL_ENDPOINT}} \
               --param BACKEND_ENDPOINT_OVERRIDE={{BACKEND_ENDPOINT_OVERRIDE}} \
               --param APP_NAME=stage-apicast \
               --param ROUTE_NAME={{orgName}}-mt-stage-generic \
               --param WILDCARD_DOMAIN={{ ocp_apps_domain }} \
               --param THREESCALE_DEPLOYMENT_ENV=sandbox \
               --param APICAST_CONFIGURATION_LOADER=lazy \
               --param APICAST_CONFIGURATION_CACHE=0 \
               --param APICAST_MANAGEMENT_API=debug \
               -n {{ocpAdminId}}-gw
      register: create_stage_gw
      failed_when: create_stage_gw.stderr != ""  and 'already exists' not in create_stage_gw.stderr

    - name: "{{ocpAdminId}} 11)        Create Production Gateway; {{ THREESCALE_PORTAL_ENDPOINT }}"
      shell: |
        oc new-app \
               -f {{tenant_api_gw_template_url}} \
               --param THREESCALE_PORTAL_ENDPOINT={{THREESCALE_PORTAL_ENDPOINT}} \
               --param BACKEND_ENDPOINT_OVERRIDE={{BACKEND_ENDPOINT_OVERRIDE}} \
               --param APP_NAME=prod-apicast \
               --param ROUTE_NAME={{orgName}}-mt-prod-generic \
               --param WILDCARD_DOMAIN={{ ocp_apps_domain }} \
               --param THREESCALE_DEPLOYMENT_ENV=production \
               --param APICAST_CONFIGURATION_LOADER=boot \
               -n {{ocpAdminId}}-gw
      register: create_prod_gw
      failed_when: create_prod_gw.stderr != ""  and 'already exists' not in create_prod_gw.stderr

    - name: "{{ocpAdminId}} 12)        Create Wildcard Gateway     {{ GW_WILDCARD_DOMAIN }} {{ MASTER_API_HOST }}"
      shell: |
        oc new-app \
               -f {{ tenant_api_wildcard_gw_template_url }} \
               --param GW_WILDCARD_DOMAIN={{ GW_WILDCARD_DOMAIN }} \
               --param MASTER_API_HOST={{ MASTER_API_HOST }} \
               --param LOG_LEVEL=debug \
               -n {{ ocpAdminId }}-gw
      register: create_wc_gw
      failed_when: create_wc_gw.stderr != ""  and 'already exists' not in create_wc_gw.stderr



  when: create_or_delete_tenants == "create" and create_gws_with_each_tenant|bool

#  ########################################################################################################## #


#  ################################             Delete Tenant            ##################################### #
#  URI of tenant delete API is:  
#          /master/api/providers/{id}.xml
#  As of 3scale API Manager v2.2, there is not an API resource that allows for tenant lookup
#  TO-DO: 
#       implement mechanism to identify id of tenant.  
#       Probably best to do so as an xml file that is populated with creation of each tenant.
#       In this section, the tenant xml snippet is located and deleted in this xml file
 
- block:
    - name: "{{ocpAdminId}}      **********   TENANT DELETION  **********"
      debug:
        msg: "done"
  when: create_or_delete_tenants == "delete"
#  ########################################################################################################## #


- pause:
    seconds: "{{tenant_loop_delay}}"
