---

# The following is only appropriate when create generic tenants whose names are sequential
# The following is skipped when creating a "named" tenant, ie; openbanking-dev  
- block:
  - set_fact:
      counter: "{{ item }}"   

  # Padded sequence number
  - block:
    - set_fact: 
        counter: "{{ '%02d'|format(item|int) }}"
    - debug: 
        msg: "{{ item }} padded to {{ counter }}"
    when: use_padded_tenant_numbers|bool

  # Name of ocp user that is an admin to the project where 3scale resources reside
  - set_fact:
      ocpAdminId: "{{ ocp_user_name_base }}{{ counter }}"
  
  # Name of 3scale API administrator of the tenant
  - set_fact:
      tenantAdminId: "{{ tenant_admin_user_name_base }}{{ counter }}"
  
  - set_fact:
      orgName: "{{ocpAdminId}}-{{API_MANAGER_NS}}"

  - set_fact:
      gw_project_name: "{{ ocpAdminId }}-gw"

  when: item > 0

# Wildcard gateway facts
- set_fact:
    GW_WILDCARD_DOMAIN: "wc-router.{{ ocpAdminId }}.{{ ocp_apps_domain }}"
- set_fact:
    MASTER_API_HOST: "https://{{ master_access_token }}@{{API_MANAGER_NS}}-master.{{ocp_apps_domain}}"

- set_fact:
    output_file: "{{orgName}}-tenant-signup.xml"

#  ################################             Create Tenant            ##################################### #

- block:
    - name: "{{ocpAdminId}}      1)  **********   TENANT CREATION  **********"
      set_fact:
        tenantAdminEmail: "{{adminEmailUser}}%2B{{ counter }}%40{{adminEmailDomain}}"
    - debug:
        msg: "{{ocpAdminId}} tenantAdminEmail = {{tenantAdminEmail}}" 

      # NOTE:  As of 3scale 2.2, this operation is not idempotent.
      #        It creates a new tenant given the same parameters.
      #        Public and Admin domains of these tenants are different; ie:
      #         user1-3scale-mt-amp0-3-admin.apps.3295.openshift.opentlc.com 
      #         user1-3scale-mt-amp0-2-admin.apps.3295.openshift.opentlc.com
    - uri:
        url: "{{create_tenant_url}}"
        method: POST
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        body: "access_token={{master_access_token}}&org_name={{orgName}}&username={{tenantAdminId}}&password={{tenantAdminPasswd}}&email={{tenantAdminEmail}}"
        timeout: 20
        status_code: 201
        return_content: yes
        validate_certs: no
      register: create_tenant_response

    - name: "{{ocpAdminId}}     2) copy response to {{tenant_output_dir}}/{{output_file}}"
      copy:
        content: "{{create_tenant_response.content}}"
        dest: "{{tenant_output_dir}}/{{output_file}}"

    - name: "{{ocpAdminId}}     3) parse xml and extract access token, account_id and user_id"
      xml:
        path: "{{tenant_output_dir}}/{{output_file}}"
        xpath: //access_token/value
        content: text
      register: tenant_access_token
    - xml:
        path: "{{tenant_output_dir}}/{{output_file}}"
        xpath: //account/id
        content: text
      register: account_id 
    - xml:
        path: "{{tenant_output_dir}}/{{output_file}}"
        xpath: //user[state = "pending"]/id
        content: text
      register: user_id 
    - debug:
        msg: "{{tenant_access_token.matches[0].value}}  {{account_id.matches[0].id}} {{user_id.matches[0].id}}"
        verbosity: 0

    - name: "{{ocpAdminId}}     4) activate new user"
      set_fact:
        activate_user_url: "https://{{API_MANAGER_NS}}-master.{{ocp_apps_domain}}/admin/api/accounts/{{account_id.matches[0].id}}/users/{{user_id.matches[0].id}}/activate.xml"
    - uri:
        url: "{{activate_user_url}}"
        method: PUT
        body: "access_token={{master_access_token}}"
        timeout: 10
        status_code: 200
        return_content: yes
        validate_certs: no
      register: activate_user_response

    - name: "{{ocpAdminId}}     5) Give user view access to 3scale project."
      command: "oc adm policy add-role-to-user view {{ocpAdminId}} -n {{API_MANAGER_NS}}"

    - name: "{{ocpAdminId}}  6) Populate {{tenant_output_dir}}/{{tenant_provisioning_results_file}}"
      lineinfile: 
        line: "{{ocpAdminId}}\t{{orgName}}-admin.{{ocp_apps_domain}}\t{{tenantAdminId}}\t{{tenantAdminPasswd}}\t{{tenant_access_token.matches[0].value}}"
        path: "{{tenant_output_dir}}/{{tenant_provisioning_results_file}}"
        create: yes
        state: present

  when: create_or_delete_tenants == "create"

#  ########################################################################################################## #
 


#  ############                 Create Corresponding API Gateways for each Tenant                   ######### #

# if create_gws_with_each_tenant is set to true, then an API gateway & project will be created for each corresponding tenant in the same OCP cluster where API Manager resides
# If create_gws_with_each_tenant is set to false, then the assumption that API gateways will be created outside of the OCP cluster where 3scale API Manager resides
- block:
    - name: "{{ocpAdminId}}      9)  **********   TENANT API GW  **********"
      command: "oc adm new-project {{ gw_project_name }} --admin={{ ocpAdminId }}  --description={{ gw_project_name }}"
      register: create_proj
      failed_when: create_proj.stderr != ""  and 'already exists' not in create_proj.stderr

    - set_fact:
        THREESCALE_PORTAL_ENDPOINT: "https://{{tenant_access_token.matches[0].value}}@{{orgName}}-admin.{{ocp_apps_domain}}"
      when: tenant_reference_external_api_mgmt_routes|bool 
    - set_fact:
        THREESCALE_PORTAL_ENDPOINT: "http://{{tenant_access_token.matches[0].value}}@system-master.{{ API_MANAGER_NS }}:3000"
      when: not tenant_reference_external_api_mgmt_routes|bool 

    - name: "Create threescale-registry-auth image pull secret in {{ API_MANAGER_NS }}"
      shell: |
        oc create secret docker-registry threescale-registry-auth \
            --docker-server=registry.redhat.io \
            --docker-username='{{ rht_service_token_user }}' \
            --docker-password={{ rht_service_token_password }} \
            -n  {{ gw_project_name }}

    - name: "Create threescale-portal-endpoint secret in {{ API_MANAGER_NS }}"
      shell: |
        oc secret new-basicauth apicast-configuration-url-secret \
            --password={{ THREESCALE_PORTAL_ENDPOINT }} \
            -n  {{ gw_project_name }}
    # https://access.redhat.com/solutions/3394561
    #   - stage gateway pulls proxy configs with every request to backend service
    - name: "{{ocpAdminId}} 10)        Create Staging Gateway; {{ THREESCALE_PORTAL_ENDPOINT }}"
      shell: |
        oc new-app \
               -f {{tenant_api_gw_template_url}} \
               --param APICAST_NAME=stage-apicast \
               --param DEPLOYMENT_ENVIRONMENT=sandbox \
               --param CONFIGURATION_LOADER=lazy \
               --param CONFIGURATION_CACHE=0 \
               --param MANAGEMENT_API=debug \
               -n {{ gw_project_name }}
      register: create_stage_gw
      failed_when: create_stage_gw.stderr != ""  and 'already exists' not in create_stage_gw.stderr

    - name: "{{ocpAdminId}} 11)        Create Production Gateway; {{ THREESCALE_PORTAL_ENDPOINT }}"
      shell: |
        oc new-app \
               -f {{tenant_api_gw_template_url}} \
               --param APICAST_NAME=prod-apicast \
               --param DEPLOYMENT_ENVIRONMENT=production \
               --param CONFIGURATION_LOADER=boot \
               -n {{ gw_project_name }}
      register: create_prod_gw
      failed_when: create_prod_gw.stderr != ""  and 'already exists' not in create_prod_gw.stderr

  when: create_or_delete_tenants == "create" and create_gws_with_each_tenant|bool

#  ########################################################################################################## #


#  ################################             Delete Tenant            ##################################### #
#  URI of tenant delete API is:  
#          /master/api/providers/{id}.xml
#  As of 3scale API Manager v2.2, there is not an API resource that allows for tenant lookup
#  TO-DO: 
#       implement mechanism to identify id of tenant.  
#       Probably best to do so as an xml file that is populated with creation of each tenant.
#       In this section, the tenant xml snippet is located and deleted in this xml file
 
- block:
    - name: "{{ocpAdminId}}      **********   TENANT DELETION  **********"
      debug:
        msg: "done"
  when: create_or_delete_tenants == "delete"
#  ########################################################################################################## #


- pause:
    seconds: "{{tenant_loop_delay}}"
