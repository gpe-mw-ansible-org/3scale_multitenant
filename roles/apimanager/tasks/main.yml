---

# Plagarized (and modified for this course) from:  https://github.com/nmasse-itix/OpenShift-Lab/tree/master/roles/3scale
# Thank you nmasse-itix !
#
# Use this ansible play for this course only.
# Afterwards, leverage (and contribute to) the original ansible playbook created by nmasse-itix.

- set_fact:
    modified_template_path: "{{ work_dir }}/amp.yml"

- name: check if user is cluster admin
  shell: "oc get project default"
  register: default_project_result
  ignore_errors: true
  changed_when: false

- fail:
    msg: "User does not have cluster-admin rights"
  when: default_project_result is failed

- name: Annotate the empty project as requested by user
  shell: "oc annotate namespace {{ API_MANAGER_NS }} openshift.io/requester={{ OCP_AMP_ADMIN_ID }} --overwrite"

- name: Enable 3scale Service Discovery
  shell: "oc adm policy add-cluster-role-to-user view system:serviceaccount:{{ API_MANAGER_NS }}:default"

- name: Delete default limitrange
  shell: |
    oc delete limitrange {{ API_MANAGER_NS }}-core-resource-limits -n {{ API_MANAGER_NS }}
  ignore_errors: true
  when: limit_range_changes_needed|bool

- name: Create a new limitrange
  template:
    src: templates/limitrange.yaml
    dest: "{{ work_dir }}/limitrange.yaml"
  when: limit_range_changes_needed|bool
- shell: |
    oc create -f {{ work_dir }}/limitrange.yaml -n {{ API_MANAGER_NS }}
  when: limit_range_changes_needed|bool


################      Multitenant  API Manager        #####################

- name: "create directory: {{ new_app_output_dir }}"
  command: mkdir -p {{ new_app_output_dir }}

- name: "Download {{ apimanager_template_url }}"
  get_url:
    url: "{{ apimanager_template_url }}"
    dest: "{{ modified_template_path }}"
    force: yes

- name: Place all deployments in a paused state
  replace:
    path: "{{ modified_template_path }}"
    regexp: '(replicas: 1\n)'
    replace: '\1    paused: true\n'

- block:
    - name: Reduce RAM resource limit on _redis_ databases
      command: sed -i 's/32Gi/6Gi/' "{{ modified_template_path }}"
  when: is_production|bool

- block:
    - name: Reduce RAM resource limit on _redis_ databases
      command: sed -i 's/32Gi/2Gi/' "{{ modified_template_path }}"

    - name: Reduce CPU resource limits and requests across all deployments
      replace:
        path: "{{ modified_template_path }}"
        regexp: '(cpu: 500m)'
        replace: 'cpu: 250m'
    - replace:
        path: "{{ modified_template_path }}"
        regexp: '(cpu: "1")'
        replace: 'cpu: 500m'
    - replace:
        path: "{{ modified_template_path }}"
        regexp: '(cpu: 2\n)'
        replace: 'cpu: 500m'
  when: not is_production|bool

- name: Use ReadWriteOnce for 3scale CMS
  replace:
    path: "{{ modified_template_path }}"
    regexp: '(ReadWriteMany)'
    replace: 'ReadWriteOnce'
  when: use_rwo_for_cms|bool


- name: Process the OpenShift Template and create the OpenShift objects for the 3scale API Management Platform
  shell: |
      oc new-app -f "{{ modified_template_path }}" \
                 -p "MASTER_NAME={{ API_MANAGER_NS }}-master" \
                 -p "MASTER_PASSWORD={{ amp_master_passwd }}" \
                 -p "MASTER_ACCESS_TOKEN={{ master_access_token }}" \
                 -p "TENANT_NAME={{ default_tenant_name  }}" \
                 -p "ADMIN_PASSWORD={{ default_tenant_admin_passwd }}" \
                 -p "ADMIN_ACCESS_TOKEN={{ default_tenant_access_token }}" \
                 -p "WILDCARD_DOMAIN={{  ocp_domain }}" \
                 -n "{{ API_MANAGER_NS }}" \
                 > {{ new_app_output }}

- name: output message
  debug:
    msg: new-app output available at {{ new_app_output }}

# Only set-up smtp if all settings are correct
# Otherwise, errors will be thrown during provisioning of tenents if smtp settings are incorrect
- name: "Modify smtp config map"
  k8s:
    state: present
    force: yes
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/system-smtp.j2
  when: smtp_userid != "changeme"



# #### Storage Tier
- name: "Resume {{ with_items }}"
  command: oc rollout resume dc/"{{ item }}" -n "{{ API_MANAGER_NS }}"
  with_items:
    - backend-redis
    - system-memcache
    - system-mysql
    - system-redis
    - zync-database

- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - backend-redis
      - system-memcache
      - system-mysql
      - system-redis
      - zync-database


# #### Backend Listeners
- name: "Resume {{ with_items }}"
  command: oc rollout resume dc/"{{ item }}" -n "{{ API_MANAGER_NS }}"
  with_items:
    - backend-listener
    - backend-worker
- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - backend-listener
      - backend-worker

# #### System Tier
- name: "Resume {{ with_items }}"
  command: oc rollout resume dc/"{{ item }}" -n "{{ API_MANAGER_NS }}"
  with_items:
    - system-app
- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - system-app

# #### Utility Tier
- name: "Resume {{ with_items }}"
  command: oc rollout resume dc/"{{ item }}" -n "{{ API_MANAGER_NS }}"
  with_items:
    - system-sidekiq
    - system-sphinx
    - backend-cron
- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - system-sidekiq
      - system-sphinx
      - backend-cron


# #### Gateway Tier
- name: "Resume {{ with_items }}"
  command: oc rollout resume dc/"{{ item }}" -n "{{ API_MANAGER_NS }}"
  with_items:
    - apicast-staging
    - apicast-production
  when: RESUME_CONTROL_PLANE_GWS
- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - apicast-staging
      - apicast-production
  when: RESUME_CONTROL_PLANE_GWS

# #### Zync / RHSSO Sync Tier
- name: "Resume {{ with_items }}"
  command: oc rollout resume dc/"{{ item }}" -n "{{ API_MANAGER_NS }}"
  with_items:
    - zync
    - zync-que
- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - zync
      - zync-que

###################################################################


- name: workload Tasks Complete
  debug:
    msg: workload Tasks Complete
